{"version":3,"sources":["App.js","index.js"],"names":["App","React","useState","newDice","i","push","generateNewDie","allNewDice","dice","setDice","tenzies","setTenzies","value","Math","ceil","random","isHeld","id","nanoid","useEffect","allHeld","every","die","firstValue","allSameValue","console","log","diceElements","map","holdDice","oldDice","className","onClick","rootElement","document","getElementById","createRoot","render"],"mappings":"6LAKe,SAASA,IACtB,MAAwBC,IAAMC,SAqB9B,WAEE,IADA,IAAMC,EAAU,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAQE,KAAKC,KAEf,OAAOH,CACT,CA3BuCI,IAAa,mBAA7CC,EAAI,KAAEC,EAAO,KACpB,EAA8BR,IAAMC,UAAS,GAAM,mBAA5CQ,EAAO,KAAEC,EAAU,KAY1B,SAASL,IACP,MAAO,CACLM,MAAOC,KAAKC,KAAqB,EAAhBD,KAAKE,UACtBC,QAAQ,EACRC,GAAIC,cAER,CAhBAjB,IAAMkB,WAAU,WACd,IAAMC,EAAUZ,EAAKa,OAAM,SAACC,GAAG,OAAKA,EAAIN,MAAM,IACxCO,EAAaf,EAAK,GAAGI,MACrBY,EAAehB,EAAKa,OAAM,SAACC,GAAG,OAAKA,EAAIV,QAAUW,CAAU,IAC7DH,GAAWI,IACbb,GAAW,GACXc,QAAQC,IAAI,YAEhB,GAAG,CAAClB,IAkCJ,IAAMmB,EAAenB,EAAKoB,KAAI,SAACN,GAAG,OAChC,cAAC,IAAG,CAEFV,MAAOU,EAAIV,MACXI,OAAQM,EAAIN,OACZa,SAAU,kBAbIZ,EAaWK,EAAIL,QAZ/BR,GAAQ,SAACqB,GAAO,OACdA,EAAQF,KAAI,SAACN,GACX,OAAOA,EAAIL,KAAOA,EAAE,2BAAQK,GAAG,IAAEN,QAASM,EAAIN,SAAWM,CAC3D,GAAE,IAJN,IAAkBL,CAakB,GAH3BK,EAAIL,GAIT,IAGJ,OACE,iCACGP,GAAW,cAAC,IAAQ,IACrB,oBAAIqB,UAAU,QAAO,SAAC,YACtB,mBAAGA,UAAU,eAAc,SAAC,sGAI5B,qBAAKA,UAAU,iBAAgB,SAAEJ,IACjC,wBAAQI,UAAU,YAAYC,QAlClC,WACEvB,GAAQ,SAACqB,GAAO,OACdA,EAAQF,KAAI,SAACN,GACX,OAAOA,EAAIN,OAASM,EAAMhB,GAC5B,GAAE,GAEN,EA4BoD,SAC7CI,EAAU,WAAa,WAIhC,CCrEA,IAAMuB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAACrC,EAAG,M","file":"static/js/main.4d4ce9f8.chunk.js","sourcesContent":["import React from \"react\";\nimport Die from \"./Die\";\nimport { nanoid } from \"nanoid\";\nimport Confetti from \"react-confetti\";\n\nexport default function App() {\n  const [dice, setDice] = React.useState(allNewDice());\n  const [tenzies, setTenzies] = React.useState(false);\n\n  React.useEffect(() => {\n    const allHeld = dice.every((die) => die.isHeld);\n    const firstValue = dice[0].value;\n    const allSameValue = dice.every((die) => die.value === firstValue);\n    if (allHeld && allSameValue) {\n      setTenzies(true);\n      console.log(\"You won!\");\n    }\n  }, [dice]);\n\n  function generateNewDie() {\n    return {\n      value: Math.ceil(Math.random() * 6),\n      isHeld: false,\n      id: nanoid()\n    };\n  }\n\n  function allNewDice() {\n    const newDice = [];\n    for (let i = 0; i < 10; i++) {\n      newDice.push(generateNewDie());\n    }\n    return newDice;\n  }\n\n  function rollDice() {\n    setDice((oldDice) =>\n      oldDice.map((die) => {\n        return die.isHeld ? die : generateNewDie();\n      })\n    );\n  }\n\n  function holdDice(id) {\n    setDice((oldDice) =>\n      oldDice.map((die) => {\n        return die.id === id ? { ...die, isHeld: !die.isHeld } : die;\n      })\n    );\n  }\n\n  const diceElements = dice.map((die) => (\n    <Die\n      key={die.id}\n      value={die.value}\n      isHeld={die.isHeld}\n      holdDice={() => holdDice(die.id)}\n    />\n  ));\n\n  return (\n    <main>\n      {tenzies && <Confetti />}\n      <h1 className=\"title\">Tenzies</h1>\n      <p className=\"instructions\">\n        Roll until all dice are the same. Click each die to freeze it at its\n        current value between rolls.\n      </p>\n      <div className=\"dice-container\">{diceElements}</div>\n      <button className=\"roll-dice\" onClick={rollDice}>\n        {tenzies ? \"New Game\" : \"Roll\"}\n      </button>\n    </main>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n// import \"./styles.css\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}